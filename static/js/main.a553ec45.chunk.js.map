{"version":3,"sources":["components/Header/Header.js","services/CountriesService/CountriesService.js","components/Search/Search.js","components/Regions/Regions.js","components/CountryList/CountryList.js","pages/Countries/Countries.js","pages/Country/Country.js","components/ScrollIntoView/ScrollIntoView.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CountriesService","localStorage","getItem","this","getLocalStorage","fetchCountries","borders","allCountries","map","borderCountry","find","country","alpha3Code","countryCode","getAllCountries","currentCountry","getBorders","url","axios","get","then","response","countryList","data","setItem","JSON","stringify","parse","Search","props","handleChange","bind","event","onChange","target","value","type","name","id","autoComplete","placeholder","xmlns","height","viewBox","width","d","fill","React","Component","Regions","renderRegions","regions","region","key","selectRegion","checked","isChecked","htmlFor","e","CountryList","items","to","src","flag","alt","population","toLocaleString","notFound","fullList","length","countryService","CountryService","Countries","useState","countries","setCountries","filteredCountries","setFilteredCountries","setRegions","searchQuery","setSearchQuery","useEffect","a","allRegions","filter","sort","regionObjects","Set","getRegions","getData","activeRegions","hasSearchQuery","hasRegionQuery","filtered","toLowerCase","indexOf","some","checkedRegions","setCurrentCountry","getCountryData","match","params","getCountry","onClick","history","goBack","opacity","capital","nativeName","currencies","currency","symbol","renderCurrencies","languages","lang","renderLanguages","undefined","renderBorders","ScrollIntoView","componentDidMount","window","scrollTo","componentDidUpdate","prevProps","location","render","children","PureComponent","withRouter","Main","onUpdate","exact","path","component","Country","App","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a553ec45.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.scss'\n\nfunction Header() {\n  return (\n    <header className=\"toolbar\"> \n      <h1 className=\"title\">Countries</h1>\n    </header>\n  )\n}\n\nexport default Header","import axios from 'axios'\nconst API_URL = 'https://restcountries.eu/rest/v2'\n\nclass CountriesService {\n\n  getAllCountries() {\n    return localStorage.getItem('reactCountries') ? this.getLocalStorage() : this.fetchCountries()\n  }\n\n  getBorders(borders, allCountries) {\n    return borders.map(borderCountry => {\n      return allCountries.find(country => country.alpha3Code === borderCountry)\n    })\n  }\n\n  getCountryData(countryCode) {\n    const allCountries = this.getAllCountries()\n    const currentCountry = allCountries.find(country => countryCode === country.alpha3Code)\n    currentCountry.borders = this.getBorders(currentCountry.borders, allCountries)\n    return currentCountry\n  }\n\n  async fetchCountries() {\n    const url = `${API_URL}/all`\n    return axios.get(url).then(response => {\n      const countryList = response.data\n      localStorage.setItem('reactCountries', JSON.stringify(countryList))\n      return countryList\n    })\n  }\n\n  getLocalStorage() {\n    return JSON.parse(localStorage.getItem('reactCountries'))\n  }\n\n}\n\nexport default CountriesService","import React from 'react'\nimport './Search.scss'\n\nclass Search extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(event) {\n    this.props.onChange(event.target.value)\n  }\n\n\n  render() {\n    return (\n      <div className=\"search\">\n        <div className=\"input-group\"> \n          <input \n            type=\"text\" \n            name=\"search\" \n            id=\"search\" \n            autoComplete=\"off\" \n            placeholder=\"Search for a country\"\n            onChange={this.handleChange}\n          />\n          <div className=\"icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n              <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n              <path fill=\"#2C3E50\" d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n            </svg>\n          </div>\n        </div>\n      </div>\n    )\n\n  }\n\n}\n\nexport default Search","import React from 'react'\nimport './Regions.scss'\n\nclass Regions extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.selectRegion = this.selectRegion.bind(this)\n  }\n\n  selectRegion(e) {\n    this.props.onChange({ \n      name: e.target.value,\n      isChecked: e.target.checked\n    });\n  }\n\n  renderRegions = () => {\n    return this.props.regions.map( (region, key) => {\n      return (\n        <div className=\"input-group\" key={key} >\n          <input \n            type=\"checkbox\" \n            name={region.name} \n            value={region.name}  \n            id={region.name} \n            onChange={this.selectRegion}\n            checked={region.isChecked}\n          />\n          <label htmlFor={region.name} >{region.name}</label>\n        </div>\n      )\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"regions\"> \n        {this.renderRegions()}\n      </div>\n    )\n\n  }\n\n}\n\nexport default Regions","import React from 'react'\nimport './CountryList.scss'\nimport { Link } from 'react-router-dom'\n\nconst CountryList = props =>  {\n  const items = props.countryList.map((country, key) =>\n    <li className=\"list__item\"  key={key}>\n      <Link to={`/country/${country.alpha3Code}`} >\n        <div className=\"flag\">\n          <img src={country.flag} alt={country.name} />\n        </div>\n        <div className=\"country-info\">\n          <h3>{country.name}</h3>\n          <p><b>Population</b>: {country.population.toLocaleString('en')} </p>\n          <p><b>Region</b>: {country.region} </p>\n        </div>\n      </Link>\n    </li>\n  );\n\n  const notFound = <h1 className=\"empty\">Sorry, Can't find that...</h1>\n\n  const fullList = <ul className=\"list\" >{items}</ul>\n  \n  return props.countryList.length ? fullList : notFound\n\n}\n\nexport default CountryList","import React, {useEffect, useState} from 'react'\nimport CountryService from '../../services/CountriesService/CountriesService'\nimport './Countries.scss'\nimport Search from '../../components/Search/Search'\nimport Regions from '../../components/Regions/Regions'\nimport CountryList from '../../components/CountryList/CountryList'\n\nconst countryService = new CountryService()\n\nconst Countries = () => {\n\n  const [countries, setCountries] = useState([])\n  const [filteredCountries, setFilteredCountries] = useState([])\n  const [regions, setRegions] = useState([])\n  const [searchQuery, setSearchQuery] = useState('')\n\n  useEffect(() => {\n    async function getData() {\n      const allCountries = await countryService.getAllCountries()\n      setCountries(allCountries)\n      setFilteredCountries(allCountries)\n  \n      const getRegions = () => {\n        const allRegions = allCountries.map(country => country.region).filter(region => region.length)\n        allRegions.sort()\n        let sortedRegions = [...new Set(allRegions)]\n        let regionObjects = sortedRegions.map(region => {\n          const regionObject = {\n            name: region,\n            isChecked: false\n          }\n          return regionObject\n        })\n        setRegions(regionObjects)\n        \n      }\n  \n      getRegions()\n\n    } \n\n    getData()\n\n  }, [])\n\n  useEffect(() => {    \n    const activeRegions = regions.filter(region => region.isChecked === true)\n    const hasSearchQuery = searchQuery.length\n    const hasRegionQuery = activeRegions.length\n\n    if (hasSearchQuery && !hasRegionQuery) {\n      // SEARCH ONLY\n      const filtered = countries.filter(country => country.name.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1)\n      setFilteredCountries([...filtered])\n    } else if (hasSearchQuery && hasRegionQuery) {\n      // SEARCH & FILTER\n      const filtered = countries.filter(country => country.name.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1).filter(country => {\n        const found = activeRegions.some(region => region.name === country.region)\n        return found ? country : null\n      })\n      setFilteredCountries([...filtered])\n    } else if (!hasSearchQuery && hasRegionQuery) {\n      // FILTER ONLY BY REGIONS\n      const filtered = countries.filter(country => {\n        const found = activeRegions.some(region => region.name === country.region)\n        return found ? country : null\n      })\n      setFilteredCountries([...filtered])\n    } else {\n      if (countries.length) setFilteredCountries([...countries])\n    }\n  }, [searchQuery, regions, countries])\n\n\n\tconst handleSelectedRegion = (e) => {\n\t\tconst checkedRegions = [...regions]\n\t\tcheckedRegions.map(region => {\n\t\t\tif (region.name === e.name) {\n\t\t\t\tregion.isChecked = e.isChecked\n\t\t\t}\n\t\t\treturn region\n\t\t})\n\n    setRegions(checkedRegions)\n\t}\n\n  const countriesPage =  (\n    <div className=\"container\">\n      <div className=\"header\">\n        <Search  onChange={ e => setSearchQuery(e) } />\n        <Regions regions={regions} onChange={handleSelectedRegion} />\n      </div>\n      <CountryList countryList={filteredCountries} />\n    </div>\n  )\n\n  return countriesPage\n\n}\n\nexport default Countries","import React, {useEffect, useState} from 'react'\nimport CountryService from '../../services/CountriesService/CountriesService'\nimport { Link } from 'react-router-dom'\nimport './Country.scss'\n\nconst countryService = new CountryService()\n\nconst CountryList = props =>  {\n  const [currentCountry, setCurrentCountry] = useState({})\n\n  useEffect(() => {\n    const getCountry = () => {\n      const currentCountry = countryService.getCountryData(props.match.params.country)\n      setCurrentCountry(currentCountry)\n    }\n\n    getCountry()\n\n  }, [props])\n\n\n  const renderBorders = (borders) => {\n\n    if(borders !== undefined ) {\n\n      if (borders.length > 1) {\n        return borders.map((country, key) =>\n          <Link className=\"borderList__border\" key={key} to={`/country/${country.alpha3Code}`} >\n            <div className=\"mini-flag\">\n              <img src={country.flag} alt={country.name} />\n            </div>\n            <span>{country.name}</span>\n          </Link>\n        )\n      } else {\n        return <span>No Borders</span>\n      }\n\n    }\n  }\n\n  const goBack = () => props.history.goBack()\n\n  const renderCurrencies = (currencies) => {\n    if (currencies) {\n      return currencies.map((currency, key) => <span key={key}>{currency.symbol} {currency.name}</span>)\n    }\n  }\n\n  const renderLanguages = (languages) => {\n    if (languages) {\n      return languages.map((lang, key) => <span key={key}>{lang.name}</span>)\n    }\n  }\n\n  const countryPage = <div className=\"container\">\n    <button className=\"back-button\" onClick={goBack}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" opacity=\".87\" />\n        <path fill=\"rgba(var(--blue), var(--saturated))\" d=\"M17.51 3.87L15.73 2.1 5.84 12l9.9 9.9 1.77-1.77L9.38 12l8.13-8.13z\" />\n      </svg>\n      Back\n    </button>\n\n    <div className=\"content\">\n\n      <div className=\"content__top\">\n        <img src={currentCountry.flag} alt={currentCountry.name} />\n\n        <div className=\"inner\">\n          <h2 className=\"mb-10\"> {currentCountry.name} </h2>\n          <p> <b>Capital:</b> {currentCountry.capital} </p>\n        </div>\n      </div>\n\n      <div className=\"inner\">\n        <div className=\"content__bottom\">\n          <p> <b>Native Name:</b> {currentCountry.nativeName} </p>\n          <p> <b>Population:</b> {currentCountry.population ? currentCountry.population.toLocaleString('en') : 0} </p>\n          <p> <b>Region:</b> {currentCountry.region} </p>\n\n          <div className=\"mini-list\">\n            <p><b>Currencies: </b>{renderCurrencies(currentCountry.currencies)}</p>\n          </div>\n\n          <div className=\"mini-list\">\n            <p><b>Languages: </b> {renderLanguages(currentCountry.languages)}</p>\n          </div>\n\n          <div className=\"borders\">\n            <p><b>Bordering Countries:</b></p>\n            <div className=\"borderList\"> {renderBorders(currentCountry.borders)} </div>\n          </div>\n\n        </div>\n\n      </div>\n\n    </div>\n\n\n  </div>\n  \n  return countryPage\n\n}\n\nexport default CountryList","import { PureComponent } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollIntoView extends PureComponent {\n  componentDidMount = () => window.scrollTo(0, 0);\n\n  componentDidUpdate = prevProps => {\n    if (this.props.location !== prevProps.location) window.scrollTo(0, 0);\n  };\n\n  render = () => this.props.children;\n}\n\nexport default withRouter(ScrollIntoView);","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Countries from '../../pages/Countries/Countries'\nimport Country from '../../pages/Country/Country'\nimport ScrollIntoView from '../ScrollIntoView/ScrollIntoView'\n\nfunction Main() {\n  return (\n    <main> \n      <ScrollIntoView>\n        <Switch>\n          <Route onUpdate={() => window.scrollTo(0, 0)}  exact path=\"/react-countries-api/\" component={Countries} />\n          <Route onUpdate={() => window.scrollTo(0, 0)}  path=\"/react-countries-api/country/:country\" component={Country} />\n        </Switch>\n      </ScrollIntoView>\n    </main>\n  )\n}\n\nexport default Main","import React from 'react';\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main'\nimport './sass/main.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render( <BrowserRouter > < App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}